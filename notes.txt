todo:
initialize tiles
pathfinding

global variables:
visibility tiles = 2d array of:
  list of units currently seeing tile
coherence tiles = 2d array of:
  a 1d array (sorted by increasing time) of:
    time changed, faction w/ coherence here (may be no faction)
  index at current time
  last time lost visibility (not coherence) per faction (set to max value if currently visible)
decoherence queue = list or dict sorted by time of:
  tile pos, direction, faction, time to lose visibility (not coherence)
time variables:
  prev time, sim time, current time
  cap current time - sim time to a max amount

update units function:
for each unit:
  calculate time will reach next tile(s), if between prev time & current time then add to dict (key = time; value = unit, tile, direction)
sort dict by increasing time
for each unit in dict:
  add visiblity to tiles (including on coherence tiles), 1 tile "thick" on side of dict direction
  remove visibility from tiles, 1 tile "thick" on opposite side of dict direction
  if dict time > sim time:
    if another faction could see unit at prev tile but not this tile:
      add tile to decoherence queue for other faction
    init list of potential tiles in unit's visibility to cohere
    for each non-visible tile (according to coherence tiles) surrounding this unit:
      if unit w/ this unit's sight range (+ 1/2 tile length?) is here, remove tiles from list that this "unit" can see
    cohere remaining tiles in list (unless only remaining tile is the tile the unit is on)
    for each tile removed from:
      if no one in this faction sees this tile anymore:
        lose visibility time = lowest time each of surrounding 3 (up to 5) tiles lost visibility
        if lose visibility time or another faction's unit on this tile:
          lose visibility time += time it takes for light to travel 1 tile
          lose visibility time = max(dict time, lose visibility time)
          add tile to decoherence queue
for each entry in decoherence queue (loop through concurrently with loop above):
  if current time >= entry time:
    pop entry from queue
    if tile currently visible then continue
    set lose visibility time
    decohere tiles, 1 tile "thick" on side of entry direction, with radius of largest unit that faction can't see from here
    push entries into queue for each of the 8 surrounding tiles that are not visible to faction (according to visibility tiles) and can be traveled to
    note: correct to assume that all units can go at speed of light b/c can momentarily turn photon into particle & antiparticle